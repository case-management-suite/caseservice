// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: grpc/api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CaseServiceAPIClient is the client API for CaseServiceAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaseServiceAPIClient interface {
	NewCase(ctx context.Context, in *NewCaseRequest, opts ...grpc.CallOption) (*UUIDResponse, error)
	FindCase(ctx context.Context, in *FindCaseRequest, opts ...grpc.CallOption) (*FindCaseResponse, error)
	FindCases(ctx context.Context, in *FindCasesRequest, opts ...grpc.CallOption) (*FindCasesResponse, error)
	FindCaseActions(ctx context.Context, in *FindCaseActionsRequest, opts ...grpc.CallOption) (*FindCaseActionsResponse, error)
	UpdateCase(ctx context.Context, in *UpdateCaseRequest, opts ...grpc.CallOption) (*UpdateCaseResponse, error)
}

type caseServiceAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCaseServiceAPIClient(cc grpc.ClientConnInterface) CaseServiceAPIClient {
	return &caseServiceAPIClient{cc}
}

func (c *caseServiceAPIClient) NewCase(ctx context.Context, in *NewCaseRequest, opts ...grpc.CallOption) (*UUIDResponse, error) {
	out := new(UUIDResponse)
	err := c.cc.Invoke(ctx, "/CaseServiceAPI/NewCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceAPIClient) FindCase(ctx context.Context, in *FindCaseRequest, opts ...grpc.CallOption) (*FindCaseResponse, error) {
	out := new(FindCaseResponse)
	err := c.cc.Invoke(ctx, "/CaseServiceAPI/FindCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceAPIClient) FindCases(ctx context.Context, in *FindCasesRequest, opts ...grpc.CallOption) (*FindCasesResponse, error) {
	out := new(FindCasesResponse)
	err := c.cc.Invoke(ctx, "/CaseServiceAPI/FindCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceAPIClient) FindCaseActions(ctx context.Context, in *FindCaseActionsRequest, opts ...grpc.CallOption) (*FindCaseActionsResponse, error) {
	out := new(FindCaseActionsResponse)
	err := c.cc.Invoke(ctx, "/CaseServiceAPI/FindCaseActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caseServiceAPIClient) UpdateCase(ctx context.Context, in *UpdateCaseRequest, opts ...grpc.CallOption) (*UpdateCaseResponse, error) {
	out := new(UpdateCaseResponse)
	err := c.cc.Invoke(ctx, "/CaseServiceAPI/UpdateCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaseServiceAPIServer is the server API for CaseServiceAPI service.
// All implementations must embed UnimplementedCaseServiceAPIServer
// for forward compatibility
type CaseServiceAPIServer interface {
	NewCase(context.Context, *NewCaseRequest) (*UUIDResponse, error)
	FindCase(context.Context, *FindCaseRequest) (*FindCaseResponse, error)
	FindCases(context.Context, *FindCasesRequest) (*FindCasesResponse, error)
	FindCaseActions(context.Context, *FindCaseActionsRequest) (*FindCaseActionsResponse, error)
	UpdateCase(context.Context, *UpdateCaseRequest) (*UpdateCaseResponse, error)
	mustEmbedUnimplementedCaseServiceAPIServer()
}

// UnimplementedCaseServiceAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCaseServiceAPIServer struct {
}

func (UnimplementedCaseServiceAPIServer) NewCase(context.Context, *NewCaseRequest) (*UUIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCase not implemented")
}
func (UnimplementedCaseServiceAPIServer) FindCase(context.Context, *FindCaseRequest) (*FindCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCase not implemented")
}
func (UnimplementedCaseServiceAPIServer) FindCases(context.Context, *FindCasesRequest) (*FindCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCases not implemented")
}
func (UnimplementedCaseServiceAPIServer) FindCaseActions(context.Context, *FindCaseActionsRequest) (*FindCaseActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCaseActions not implemented")
}
func (UnimplementedCaseServiceAPIServer) UpdateCase(context.Context, *UpdateCaseRequest) (*UpdateCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCase not implemented")
}
func (UnimplementedCaseServiceAPIServer) mustEmbedUnimplementedCaseServiceAPIServer() {}

// UnsafeCaseServiceAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaseServiceAPIServer will
// result in compilation errors.
type UnsafeCaseServiceAPIServer interface {
	mustEmbedUnimplementedCaseServiceAPIServer()
}

func RegisterCaseServiceAPIServer(s grpc.ServiceRegistrar, srv CaseServiceAPIServer) {
	s.RegisterService(&CaseServiceAPI_ServiceDesc, srv)
}

func _CaseServiceAPI_NewCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceAPIServer).NewCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CaseServiceAPI/NewCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceAPIServer).NewCase(ctx, req.(*NewCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseServiceAPI_FindCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceAPIServer).FindCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CaseServiceAPI/FindCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceAPIServer).FindCase(ctx, req.(*FindCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseServiceAPI_FindCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceAPIServer).FindCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CaseServiceAPI/FindCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceAPIServer).FindCases(ctx, req.(*FindCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseServiceAPI_FindCaseActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCaseActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceAPIServer).FindCaseActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CaseServiceAPI/FindCaseActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceAPIServer).FindCaseActions(ctx, req.(*FindCaseActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaseServiceAPI_UpdateCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaseServiceAPIServer).UpdateCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CaseServiceAPI/UpdateCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaseServiceAPIServer).UpdateCase(ctx, req.(*UpdateCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaseServiceAPI_ServiceDesc is the grpc.ServiceDesc for CaseServiceAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaseServiceAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CaseServiceAPI",
	HandlerType: (*CaseServiceAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCase",
			Handler:    _CaseServiceAPI_NewCase_Handler,
		},
		{
			MethodName: "FindCase",
			Handler:    _CaseServiceAPI_FindCase_Handler,
		},
		{
			MethodName: "FindCases",
			Handler:    _CaseServiceAPI_FindCases_Handler,
		},
		{
			MethodName: "FindCaseActions",
			Handler:    _CaseServiceAPI_FindCaseActions_Handler,
		},
		{
			MethodName: "UpdateCase",
			Handler:    _CaseServiceAPI_UpdateCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/api.proto",
}
